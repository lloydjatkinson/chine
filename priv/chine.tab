#
# szemu primitives
#

###############################
# op3
###############################

zbranch.h	ZBRAN_H	( f -- )   # L:4
literal.h	LIT_H	( -- n )   # n:4  
dup		DUP     ( a -- a a )
rot		ROT     ( a b c -- b c a ) # rotate down 
over		OVER	( a b -- a b a )
drop		DROP    ( a -- )
swap		SWAP	( a b -- b a )
-		SUB	( a b -- [ a-b ] )

###############################
# op4
###############################

+		ADD	( a b -- [ a+b ] )
*		MUL    	( a b -- [ a*b )
=		EQ      ( a b -- [ a==b ]
and		AND     ( a b -- [ a&b ] )
or		OR      ( a b -- [ a|b ] )
0=		ZEQ     ( a -- [ a==0 ] )
0<        	ZLT	( a -- [ a<0 ] )
not       	NOT	( a -- [ !a ] )

###############################
# op7
###############################

/		DIV     ( a b -- [ a/b ] )
mod		MOD     ( a b -- [ a%b ] )
xor		XOR     ( a b -- [ a^b ] )
negate		NEG     ( a -- [ -a ] )
invert		INV     ( a -- [ ~a ] )
<<		BSL     ( a n -- [ (uint)a << n] )
>>		BSR     ( a n -- [ (uint)a >> n ] )
>>a		ASR     ( a n -- [ a >> n ] )
u<		ULT     ( a b -- [ a<b ] )
!         	STORE	( a i -- ) | mem[i] = a
@         	FETCH	( i -- a ) | a = mem[i]
nop		NOP	( -- )
<=		LTE     ( a b -- [ a <= b ] )
u<=		ULTE 	( a b -- [ (uint)a <= (uint)b ] )
;		RET	( -- ) R: ( addr -- )
literal.w	LIT_W   ( -- n ) #  n:16
literal.l	LIT_L  	( -- n ) #  n:32
branch.b  	BRAN_B  ( -- )     #  L:8
branch.w  	BRAN_W  ( -- )     #  L:16
zbranch.w	ZBRAN_W ( f -- )  #  L:16
ibranch.b	IBRAN_B	( i -- )    #  u:8 L1:8 .. Ln:8 
ibranch.w	IBRAN_W ( i -- )    #  u:16 L1:16 .. Ln:16 
call.b		CALL_B  ( -- ) R: ( -- c-addr ) #  L:8 
call.w		CALL_W  ( -- ) R: ( -- c-addr ) #  L:16
sys.b           SYS_B   ( x1 .. xn -- y1 ) #  u:8
exit  	        EXIT    ( -- )

#  Synthtic opcodes:
#   op   replacement
#   --   -----------
#   <    [-,  0<]
#   >    [swap, -, 0<]
#   <=   [-, 1-, 0<]
#   >=   [swap, -, 1-, 0<]
#   =    [-, 0=]
#   1+   [1,+]
#   1-   [1,-]
#   min  [over,over,<,{if,[drop],[swap,drop]}]
#   max  [over,over,<,{if,[swap,drop],[drop]}]
#   abs  [dup,0<,{if,[negate]}]
